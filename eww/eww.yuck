; -------------------------
; ------- Variables -------
; -------------------------

(defvar previous_volume 0)
(defvar volume_revealed false)
(defvar power_revealed false)

(defpoll volume_ouput :interval "10s" "~/.bin/audio.sh get-output")
(defpoll volume_icon :interval "0.5s" "~/.config/eww/scripts/volume.sh -i")
(defpoll volume_percentage :interval "3s" "~/.config/eww/scripts/volume.sh -g")
(defpoll wifi_name :interval "1m" "~/.config/eww/scripts/wifi.sh -n")
(defpoll wifi_icon :interval "5s" "~/.config/eww/scripts/wifi.sh -i")

(deflisten window :initial "" "~/.config/eww/scripts/window.sh")

; -------------------------
; -------- Widgets --------
; -------------------------

(defwidget separator []
  (box :class "separator")
)

(defwidget clock []
  (button :onclick "~/.config/eww/scripts/calendar.sh" :tooltip "Open calendar" {formattime(EWW_TIME, "%-l:%M %p | %B %-e, %Y")})
)

; (defwidget cal []
  ;   (calendar :width 300 :height 150)
; )

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal" :width 300))))

(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update volume_revealed=true" :onhoverlost "${EWW_CMD} update volume_revealed=false"
    (box :space-evenly false :spacing 6 :tooltip "Volume: ${volume_percentage}% (${volume_ouput})" :class "volume ${volume_revealed ? 'revealed' : ''}"
      (revealer :transition "slideleft" :reveal volume_revealed
        (scale :min 0 :max 101 :value volume_percentage :onchange "~/.config/eww/scripts/volume.sh -s {}")
      )
      
      (button :class "icon" :onclick "~/.config/eww/scripts/volume.sh -m" :onrightclick "~/.bin/audio.sh toggle-output && ${EWW_CMD} update volume_ouput=$(~/.bin/audio.sh get-output)" volume_icon)
    )
  )
)

(defwidget wifi []
  (box :tooltip "Connected to ${wifi_name}" :class "wifi"
    (label :class "icon" :text wifi_icon)
  )
)

(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power_revealed=true" :onhoverlost "${EWW_CMD} update power_revealed=false"
    (box :space-evenly false :spacing 6 :class "power ${power_revealed ? 'revealed' : ''}"
      (revealer :transition "slideleft" :reveal power_revealed
        (box :orientation "h" :spacing 6
          (button :class "icon" :onclick "hyprctl dispatch exit" :tooltip "Logout" "")
          (button :class "icon" :onclick "systemctl reboot" :tooltip "Restart" "")
          (button :class "icon" :onclick "systemctl poweroff" :tooltip "Shutdown" "")
        )
      )
      
      ; (button :class "icon" :onclick "systemctl suspend" :tooltip "Sleep" "")
      (button :class "icon" :onclick "swaylock -fSle --indicator --indicator-radius 110 --indicator-idle-visible --clock --timestr \"%l:%M %p\" --datestr \"%a, %B %e, %Y\" --effect-blur 5x5" :tooltip "Sleep" "")
    )
  )
)

(defwidget sys_utils []
  (box :orientation "h" :space-evenly false
    (volume)
    (wifi)
    (power)
  )
)

(defwidget tray []
  (systray :pack-direction "ltr")
)

; -------------------------
; ------- Templates -------
; -------------------------

(defwidget start []
  (box :orientation "h" :halign "start"
    {window}
  )
)

(defwidget center []
  (box :orientation "h" :halign "center"
    (clock)
  )
)

(defwidget end []
  (box :orientation "h" :halign "end" :space-evenly false :spacing 0
    (tray)
    (separator)
    (sys_utils)
  )
)

(defwidget topbar []
  (centerbox :class "topbar" :orientation "h"
    (start)
    (center)
    (end)
  )
)

; -------------------------
; --------- Bars ----------
; -------------------------

(defwindow topbar-left
  :monitor 0
  :exclusive true
  :focusable false
  :stacking "fg"
  :namespace "topbar"
  
  :geometry (geometry
    :x "0%"
    :y "20px"
    :width "98%"
    :height "50px"
    :anchor "top center"
  )
  
  (topbar)
)

(defwindow topbar-right
  :monitor 1
  :exclusive true
  :focusable false
  :stacking "fg"
  :namespace "topbar"
  
  :geometry (geometry
    :x "0%"
    :y "20px"
    :width "98%"
    :height "50px"
    :anchor "top center"
  )
  
  (topbar)
)

(defwindow calendar-left
  :monitor 0
  :focusable false
  :stacking "fg"
  
  :geometry (geometry
    :x "50%"
    :y "10px"
    :width "10%"
    :height "50px"
    :anchor "top center"
  )
  
  (cal)
)

(defwindow calendar-right
  :monitor 1
  :focusable false
  :stacking "fg"
  
  :geometry (geometry
    :x "50%"
    :y "10px"
    :width "8%"
    :height "50px"
    :anchor "top center"
  )
  
  (cal)
)
