; -------------------------
; ------- Variables -------
; -------------------------

(defvar previous_volume 0)
(defvar volume_revealed false)
(defvar media_revealed false)
(defvar power_revealed false)
(defvar clock_revealed false)

(defpoll media_title :interval "0.5s" "playerctl --player playerctld metadata xesam:title")
(defpoll media_path :interval "0.5s" "~/.config/eww/scripts/media.sh -p metadata")
(defpoll media_isplaying :interval "3s" "~/.config/eww/scripts/media.sh -s metadata")
(defpoll volume_ouput :interval "10s" "~/.bin/audio.sh get-output")
(defpoll volume_icon :interval "0.2s" "~/.config/eww/scripts/volume.sh -i")
(defpoll volume_percentage :interval "3s" "~/.config/eww/scripts/volume.sh -g")
(defpoll wifi_name :interval "1m" "~/.config/eww/scripts/wifi.sh -n")
(defpoll wifi_icon :interval "5s" "~/.config/eww/scripts/wifi.sh -i")

(deflisten workspaces_left :initial "" "~/.config/eww/scripts/hypr.sh workspaces left")
(deflisten workspaces_right :initial "" "~/.config/eww/scripts/hypr.sh workspaces right")

; -------------------------
; -------- Widgets --------
; -------------------------

(defwidget separator []
  (box :class "separator")
)

(defwidget workspace [info]
  (button :class "icon ${info.created ? "created" : ""} ${info.focused ? "focused" : ""}" :tooltip "Switch to workspace ${info.id}" "")
)

(defwidget workspaces [statuses]
  (box :class "workspaces" :orientation "h" :spacing 6 :space-evenly false :vexpand false :hexpand false
    (workspace :info {statuses[0]})
    (workspace :info {statuses[1]})
    (workspace :info {statuses[2]})
    (workspace :info {statuses[3]})
    (workspace :info {statuses[4]})
    (workspace :info {statuses[5]})
    (workspace :info {statuses[6]})
    (workspace :info {statuses[7]})
    (workspace :info {statuses[8]})
  )
)

(defwidget media []
  (eventbox :onhover "${EWW_CMD} update media_revealed=true" :onhoverlost "${EWW_CMD} update media_revealed=false"
    (box :class "media ${media_revealed ? 'revealed' : ''}" :space-evenly false
      (revealer :transition "slideleft" :reveal media_revealed
        (button :class "icon" :tooltip "Previous" :onclick "playerctl --player playerctld previous" "")
      )
      
      (box :space-evenly false :vexpand false :hexpand false :visible {media_title != ""} :class "media-info"
        (box :class "cover-art" :vexpand false :hexpand false :style "background-image: url('${media_path}');")
        (label :class "title" :text "${media_title}")
      )
      
      (revealer :transition "slideright" :reveal media_revealed
        (box :space-evenly false
          (button :class "icon rounded-icon" :tooltip {media_isplaying == "true" ? "Pause" : "Play"} :onclick "~/.config/eww/scripts/media.sh toggle" {media_isplaying == "true" ? "" : ""})
          (button :class "icon" :tooltip "Next" :onclick "playerctl --player playerctld next" "")
        )
      )
    )
  )
)

(defwidget tray []
  (systray :pack-direction "ltr")
)

(defwidget wifi []
  (box :tooltip "Connected to ${wifi_name}" :class "wifi"
    (label :class "icon" :text wifi_icon)
  )
)

(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update volume_revealed=true" :onhoverlost "${EWW_CMD} update volume_revealed=false"
    (box :space-evenly false :spacing 6 :tooltip "Volume: ${volume_percentage}% (${volume_ouput})" :class "volume ${volume_revealed ? 'revealed' : ''}"
      (revealer :transition "slideleft" :reveal volume_revealed
        (scale :min 0 :max 101 :value {volume_percentage == "" ? 100 : volume_percentage} :onchange "~/.config/eww/scripts/volume.sh -s {}")
      )
      
      (button :class "icon" :onclick "~/.config/eww/scripts/volume.sh -m" :onrightclick "~/.bin/audio.sh toggle-output && ${EWW_CMD} update volume_ouput=$(~/.bin/audio.sh get-output)" volume_icon)
    )
  )
)

(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power_revealed=true" :onhoverlost "${EWW_CMD} update power_revealed=false"
    (box :space-evenly false :spacing 6 :class "power ${power_revealed ? 'revealed' : ''}"
      (revealer :transition "slideleft" :reveal power_revealed
        (box :orientation "h" :spacing 6
          (button :class "icon" :onclick "hyprctl dispatch exit" :tooltip "Logout" "")
          (button :class "icon" :onclick "systemctl reboot" :tooltip "Restart" "")
          (button :class "icon" :onclick "systemctl poweroff" :tooltip "Shutdown" "")
        )
      )
      
      ; (button :class "icon" :onclick "systemctl suspend" :tooltip "Sleep" "")
      (button :class "icon" :onclick "swaylock -fSle --indicator --indicator-radius 110 --indicator-idle-visible --clock --timestr \"%-l:%M %p\" --datestr \"%a, %B %-e, %Y\" --effect-blur 5x5" :tooltip "Sleep" "")
    )
  )
)

(defwidget clock []
  (eventbox :onhover "${EWW_CMD} update clock_revealed=true" :onhoverlost "${EWW_CMD} update clock_revealed=false"
    (button :tooltip "Open calendar" :onclick "~/.config/eww/scripts/toggle.sh calendar"
      (box :class "clock ${clock_revealed ? 'revealed' : ''}" :space-evenly false :spacing 8
        (revealer :transition "slideleft" :reveal clock_revealed
          (label :class "date" :text {formattime(EWW_TIME, "%B %-e, %Y")})
        )
        
        (label :class "time" :text {formattime(EWW_TIME, "%-l:%M %p")})
      )
    )
  )
)

(defwidget cal []
  (calendar :width 300)
)

; -------------------------
; ------- Templates -------
; -------------------------

(defwidget start [position]
  (box :orientation "h" :halign "start"
    (workspaces :statuses {position == "left" ? workspaces_left : workspaces_right})
  )
)

(defwidget center []
  (box :orientation "h" :halign "center"
    (media)
  )
)

(defwidget end []
  (box :orientation "h" :halign "end" :space-evenly false :spacing 0
    (tray)
    (separator)
    (volume)
    (wifi)
    (power)
    (separator)
    (clock)
  )
)

(defwidget topbar [position]
  (centerbox :class "topbar" :orientation "h"
    (start :position position)
    (center)
    (end)
  )
)

; -------------------------
; --------- Bars ----------
; -------------------------

(defwindow topbar-left
  :monitor 1
  :exclusive true
  :focusable false
  :stacking "fg"
  :namespace "topbar"
  
  :geometry (geometry
    :y "20px"
    :width "98%"
    :height "50px"
    :anchor "top center"
  )
  
  (topbar :position "left")
)

(defwindow topbar-right
  :monitor 0
  :exclusive true
  :focusable false
  :stacking "fg"
  :namespace "topbar"
  
  :geometry (geometry
    :y "20px"
    :width "98%"
    :height "50px"
    :anchor "top center"
  )
  
  (topbar :position "right")
)

(defwindow calendar-left
  :monitor 1
  :focusable false
  :stacking "fg"
  
  :geometry (geometry
    :x "1%"
    :y "10px"
    :width "10%"
    :height "50px"
    :anchor "top right"
  )
  
  (cal)
)

(defwindow calendar-right
  :monitor 0
  :focusable false
  :stacking "fg"
  
  :geometry (geometry
    :x "1%"
    :y "10px"
    :width "10%"
    :height "50px"
    :anchor "top right"
  )
  
  (cal)
)
